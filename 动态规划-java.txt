###动态规划
##最大子数组和
##eg：[-2,1,-3,4,-1,2,1,-5,4]，[4,-1,2,1]最大，和为6
public int maxSubArraySum(int[] nums) {
	// 假设某个函数是必须以数组中某个元素结尾的最大子数组和
	int n = nums.length;
	int[] dp = new int[n];
	f[0] = nums[0];
	int res = f[0];
	for (int i = 1; i < n; i++) {
		dp[i] = dp[i - 1] < 0 ? nums[i] : dp[i - 1] + nums[i];
		res = Math.max(res, dp[i]);
	}
	return res;
}

##爬楼梯
##要么爬一步，要么爬两步
public int maxMethods(int n) {
	if (n < 1) return 0;
	if (n = 1) return 1;
	if (n = 2) return 2;
	int[] dp = new int[n + 1];
	dp[1] = 1;
	dp[2] = 2;
	for (int i = 3; i <= n; i++) {
		dp[i] = dp[i - 1] + dp[i - 2];
	}
	return dp[n];
}
public int maxMethods(int n) {
	if (n < 1) {
		return 0;
	}
	int a = 0;
	int b = 0;
	int res = 1;
	for (int i = 1; i <= n; i++) {
		// 简单理解：a是上上次的值，b是上次的值
		a = b;
		b = res;
		res = a + b;
	}
	return res;
}