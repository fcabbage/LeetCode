###动态规划
##最大子数组和
##eg：[-2,1,-3,4,-1,2,1,-5,4]，[4,-1,2,1]最大，和为6
public int maxSubArraySum(int[] nums) {
	// 假设某个函数是必须以数组中某个元素结尾的最大子数组和
	int n = nums.length;
	int[] dp = new int[n];
	f[0] = nums[0];
	int res = f[0];
	for (int i = 1; i < n; i++) {
		dp[i] = dp[i - 1] < 0 ? nums[i] : dp[i - 1] + nums[i];
		res = Math.max(res, dp[i]);
	}
	return res;
}

##爬楼梯
##要么爬一步，要么爬两步
public int maxMethods(int n) {
	if (n < 1) return 0;
	if (n = 1) return 1;
	if (n = 2) return 2;
	int[] dp = new int[n + 1];
	dp[1] = 1;
	dp[2] = 2;
	for (int i = 3; i <= n; i++) {
		dp[i] = dp[i - 1] + dp[i - 2];
	}
	return dp[n];
}
public int maxMethods(int n) {
	if (n < 1) {
		return 0;
	}
	int a = 0;
	int b = 0;
	int res = 1;
	for (int i = 1; i <= n; i++) {
		// 简单理解：a是上上次的值，b是上次的值
		a = b;
		b = res;
		res = a + b;
	}
	return res;
}

##64.最小路径和
#给定二维数组，计算从左上到右下的最小路径和
#递归：反向思考, dfs(i, j) = min(dfs(i - 1, j) + grid[i][j], dfs(i, j - 1) + grid[i][j]) = min(dfs(i - 1, j), dfs(i, j - 1)) + gird[i][j]
#边界：dfs(i, -1)，dfs(-1, j) = Integer.MAX_VALUE，初始值dfs(0, 0) = grid[0][0]
#迭代：从正向出发，但是还是反向思考，迭代一般使用数组存储中间数据，为了防止数组越界，给grid上侧和左侧额外加一行作为边界，f = [m + 1][n + 1]
#f[i, 0], f[0, j] = Integer.MAX_VALUE, f[1][1] = grid[0][0]

#时间复杂度o(2 ^ (m + n)) 空间复杂度（栈空间）：o(m + n)
# m + n 表示从头到尾需要走过的节点数
public int minPathSum1(int[][] grid) {
	return dfs(grid.lenth, grid[0].length);
}

private int dfs(int i, int j) {
	if (i < 0 || j < 0) {
		return Integer.MAX_VALUE;
	}
	if (i = 0 && j = 0) {
		return grid[0][0];
	}
	return Math.min(dfs(i, j - 1), dfs(i - 1, j)) + grid[i][j];
}

public int minPathSum2(int[][] grid) {
	int m = grid.length;
	int n = grid[0].length;
	int[][] f = new int[m + 1][n + 1];
	Arrays.fill(f[0], Integer.MAX_VALUE);
	// 注意f的行列都是大于grid的
	for (int i = 0; i < m; i++) {
		f[i + 1][0] = Integer.MAX_VALUE；
		for (int j = 0; j < n; j++) {
			if (i == 0 && j == 0) {
				f[1][1] = grid[i][j];
			} else {
				f[i + 1][j + 1] = Math.min(f[i][j + 1], f[i + 1][j]) + grid[i][j];
			}
		}
	}
	return f[m][n];
}

##62.路径数量
#给定m * n的二维数组，求左上到右下的路径数量
#动态规划：同上，f[m + 1][n + 1]表示到grid[m][n]的路径数量，f[i + 1][j + 1] = f[i][j + 1] + f[i + 1][j]
public int pathCount1(int m, int n) {
	int[][] f = new int[m + 1][n + 1];
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			if (i == 0 && j == 0) {
				f[i + 1][j + 1] = 1; //初始化
			} else {
				f[i + 1][j + 1] = f[i][j + 1] + f[i + 1][j];
			}
		}
	}
	return f[m][n];
}
#写法2
public int pathCount2(int m, int n) {
	int[][] f = new int[m + 1][n + 1];
	f[0][1] = 1; // 或者f[1][0], 初始化边界外的数据，后续无需再初始化
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			f[i + 1][j + 1] = f[i][j + 1] + f[i + 1][j];
		}
	}
	return f[m][n];
}
#写法3
#空间优化，计算f[1][1]的时候，会用到f[0][1]，但是之后就不用了，可以把f[1][1]记到f[0][1]；对于f[1][2]，那就需要f[1][1]（f[0][1]）和f[0][2]，f[1][2]计算完后，也可以保存到f[0][2]中
#简单理解的化，就是对每一行的每个列数据，忽略掉行字段的影响，因为f[1][2] = f[0][2] + f[1][1](f[0][1])，更新f[0][2] = f[1][2];f[1][3] = f[0][3] + f[1][2](f[0][2])，更新f[0][3] = f[1][3]
#对于上述例子，可以看到，对于二维数组来说，每次更新都需要从两个维度取数据；而优化之后，每个更新都和行无关，只更新列的数据
public int pathCount2(int m, int n) {
	int[][] f = new int[n + 1];
	f[1] = 1;
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			f[j + 1] += f[j];
		}
	}
	return f[n];
}
