###17.电话号码的数字组合
public List<String> letterCombinations(String digits) {
  List<String> res = new ArrayList<>();
  if (null == digits || digits.length == 0) return res;
  Map<Character, String> numberLetterMap = new HashMap<>();
  numberLetterMap.put('2',"abc");
  numberLetterMap.put('3',"def");
  numberLetterMap.put('4',"ghi");
  numberLetterMap.put('5',"jkl");
  numberLetterMap.put('6',"mno");
  numberLetterMap.put('7',"pqrs");
  numberLetterMap.put('8',"tuv");
  numberLetterMap.put('9',"wxyz");
  backTrack(res, new StringBuilder(), 0, numberLetterMap, digits);
  return res;
}

// 回溯通用模板
// res用于收集结果
// curRes用于收集当前结果，也就是单个的结果
private void backTrack(List<String> res, StringBuilder curRes, int index, Map<Character, String> numberLetterMap, String digits) {
  // 收集条件到了，直接返回
  if (index == digits.length) {
    res.add(curRes.toString());
    return;
  }
  char digit = digits.charAt(index);
  String letters = numberLetterMap.get(digit);
  // i表示的是递归树，每层可选择的状态，举例的时候可以举第一层
  for (int i = 0; i < letters.length; i++) {
    curRes.append(letter.charAt(i));
    backTrack(res, curRes, index + 1, numberLetterMap, digits);
    // 回溯的时候是删除当前结果的末尾元素，不是i，这里的结果末尾就是index，其他题目可能是list之类的，就删去size-1上的元素
    // curRes最终的长度也是等于index，i只是每个index上的可能元素，看着for循环像是一直在添加元素，实际每次都被消除了
    curRes.deleteCharAt(index);
  }
}


###22.括号生成
##给定n，生成所有可能的括号对，只有小括号()
public List<String> generate(int n) {
    List<String> res = new ArrayList<>();
    backTrack(res, new StringBuilder(), 0, 0, n);
    return res;
}

private void backTrack(List<String> res, StringBuilder curRes, int left, int right, int n) {
  if (curRes.length() == n * 2) {
    res.add(curRes.toString());
    return;
  }
  // 下一次生成括号不是左就是右，只有两种选择，无需for，用两个if判断什么时候填充左，什么时候填充右
  // 只要左括号数小于n，就可以一直填充左括号
  // 右括号则需要小于左括号，此时左边已经有一定数量的左括号了，直接在右边填充即可
  if (left < n) {
    curRes.append("(");
    backTrack(res, curRes, left + 1, right, max);
    curRes.deleteCharAt(curRes.length() - 1);
  }
  if (right < left) {
    curRes.append(")");
    backTrack(res, curRes, left, right + 1, max);
    curRes.deleteCharAt(curRes.length() - 1);
  }
}

###39.组合总数
##给定candidates数组和target，找到数组中元素和等于target的解，元素可以重复
public List<List<Integer>> getCombinations(int[] candidates, int target) {
  List<List<Integer>> res = new ArrayList<>();
  int n = candidates.length;
  if (n == 0) {
    return res;
  }
  backTrack(res, new ArrayList<>(), 0, target, n, candidates);
  return res;
}

private void backTrack(List<List<Integer>> res, List<Integer> curRes, int index, int target, int n, int[] candidates) {
  if (target < 0) {
    return;
  }
  if (target == 0) {
    res.add(new ArrayList<>(curRes));
    return;
  }
  // eg：第一层，可以从candidates[0]加起，可以从candidates[1]加起。。。
  for (int i = index; i < n; i++) {
    curRes.add(candidates[i]);
    backTrack(res, curRes, i, target - candidates[i], n, candidates);
    curRes.remove(curRes.size() - 1);
  }
}


###46.全排列
##给定不含重复数字的数组nums，返回其所有的全排列
public List<List<Integer>> getCombinations(int[] nums) {
  List<List<Integer>> res = new ArrayList<>();
  int n = nums.length;
  if (n == 0) {
    return res;
  }
  List<Integer> curRes = new ArrayList<>();
  for (Integer num : nums) {
    curRes.add(num);
  }
  backTrack(res, curRes, 0, n);
  return res;
}

private void backTrack(List<List<Integer>> res, List<String> curRes, int index, int n) {
  if (index == n) {
    res.add(new ArrayList<>(curRes));
    return;
  }
  // i表示的是递归树，每层可选择的状态，举例的时候可以举第一层，就是说每层有多少种选择
  for (int i = index; i < n; i++) {
    Collections.swap(curRes, i, index);
    backTrack(res, curRes, index + 1, n);
    Collections.swap(curRes, i, index);
  }
}
