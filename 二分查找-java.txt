###二分查找
public int search(int[] nums, int target) {
	int l = 0;
	int r = nums.length - 1;
	while (l <= r) {
		int mid = l + (r - l) / 2;// 防止下标过大，直接相加溢出
		if (nums[mid] == target) {
			return mid;
		} else if (nums[mid] < target) {
			l = mid + 1;
		} else {
			r = mid - 1;
		}
	}
	return -1;
}

###二分查找第一个和最后一个
public int searchFirst(int[] nums, int target) {
	int l = 0;
	int r = nums.length - 1;
	while (l <= r) {
		int mid = l + (r - l) / 2;// 防止下标过大，直接相加溢出
		if (nums[mid] == target) {
			r = mid - 1;
		} else if (nums[mid] < target) {
			l = mid + 1;
		} else {
			r = mid - 1;
		}
	}
	return l > nums.length - 1 ? -1 : l;
}

public int searchLast(int[] nums, int target) {
	int l = 0;
	int r = nums.length - 1;
	while (l <= r) {
		int mid = l + (r - l) / 2;// 防止下标过大，直接相加溢出
		if (nums[mid] == target) {
			l = mid + 1;
		} else if (nums[mid] < target) {
			l = mid + 1;
		} else {
			r = mid - 1;
		}
	}
	return r < 0 ? -1 : r;
}

public int[] search(int[] nums, int target) {
	int l = 0;
	int r = nums.length - 1;
	int first = -1, last = -1;
    while (l <= r) {
		int mid = l + (r - l) / 2;// 防止下标过大，直接相加溢出
		if (nums[mid] == target) {
			fisrt = mid;
			r = mid - 1;
		} else if (nums[mid] < target) {
			l = mid + 1;
		} else {
			r = mid - 1;
		}
	}
	while (l <= r) {
		int mid = l + (r - l) / 2;// 防止下标过大，直接相加溢出
		if (nums[mid] == target) {
			last = mid;
			l = mid + 1;
		} else if (nums[mid] < target) {
			l = mid + 1;
		} else {
			r = mid - 1;
		}
	}
	return new int[]{fisrt, last};
}