###现场JAVA应用CPU/内存过高，如何排查
1.top命令可以查看到对应的进程ID，甚至是线程ID（jps -l 命令也可以找到java的进程）

2.jstack <PID>查看线程的堆栈信息，可以看到一堆daemon线程的信息，可以把daemon线程的信息过滤掉

3.看看死循环、锁竞争

4.jstat -gcutil <PID>; 常用来查看老年代是否爆满 或者 fullgc是否过于频繁
S0	Survivor 0 区使用率（百分比）
S1	Survivor 1 区使用率
E	Eden 区使用率
O	Old(old gen)区使用率
M	Metaspace(元空间)使用率
CCS	Compressed Class Space百分比
YGC	Young GC（新生代GC）次数
YGCT	Young GC 总耗时（秒）
FGC	Full GC（老年代GC）次数
FGCT	Full GC 总耗时（秒）
GCT	GC 总耗时（秒）

5.jmap查看内存的使用信息，也可以转储dump文件，用jprofile分析
内存泄漏：对象被意外引用（某些资源未关闭）
jvm堆内存是否分配过小
内存溢出：大对象(比如CSP一次性把OSS的sdk下到内存)


###redis实现滑动窗口
##背景 
#CSP对sentinel的功能进行了一定的扩展，其中包括集群限流，sentinel自带的集群限流需要额外部署token server
#CSP的throttler承担了集群限流的功能，原理就是写redis lua脚本，支持简单访问数统计和令牌桶
#agent或者sdk拦截到sentinel的限流规则如果是集群模式，则发送请求到throttler
#key的过期时间就是sentinel上设置的统计窗口，但是有个缺点，CSP目前是固定窗口限流，其精度随着窗口的增大而减小
方案1：使用zset，score就是当前时间戳，每次请求时，删除（now - window）之外的数据，统计当前zset成员数量
  优点：精度较好，实现简单
  缺点：会大幅度增加redis的内存压力
方案2：仍然使用kv，但是拆分key为一定数量的shard；每次请求时，计算窗口之外shard边界，删除边界之外的数据，同时给key的过期时间设置为略大于窗口时间，双重保障；
  优点：比起固定窗口，精度随分片数量的增加而增加，内存压力不大
  缺点：精度取决于分片的大小
