###排序
public void swap(int[] nums, int i, int j) {
	int tmp = nums[i];
	nums[i] = nums[j];
	nums[j] = tmp;
}
##冒泡
public void bubbleSort(int[] nums) {
	int n = nums.length - 1;
	for (int i = 0; i < n - 1; i++) {
		boolean isSwapped = false;
		for (int j = 0; j < n - 1 - i; j++) {
			if (nums[j] > nums[j + 1]) {
				swap(nums, i, j);
				isSwapped = true;
			}
		}
		if (!isSwapped) {
			break;
		}
	}
}
##选择排序
public void selectionSort(int[] nums) {
	int n = nums.length - 1;
	for (int i = 0; i < n - 1; i++) {
		int minIndex = i;
		for (int j = i + 1; j < n; j++) {
			if (nums[j] < nums[minIndex]) {
				minIndex = j;
			}
		}
		swap(nums, i, minIndex);
	}
}
##插入排序
public void insertionSort(int[] nums) { // i表示未插入的牌，j表示已插入的牌
	int n = nums.length - 1;
	for (int i = 1; i < n; i++) {
		int key = nums[i];
		int j = i - 1;
		while (j >= 0) {
			if (nums[j] > key) {
				nums[j + 1] = nums[j];// 后移
			} else {
				break;
			}
			j++;
		}
		nums[j + 1] = key;
	}
}
##快排
public void quickSort(int[] nums) {
	quick(nums, 0, nums.length - 1);
}

private void quickSort(int[] nums, int low, int high) {
	if (low >= high) {
		return;
	}
	int pivot = partition(nums, low, high);
	quickSort(nums, low, pivot - 1);
	quickSort(nums, pivot + 1, high);
}

private int partition(int[] nums, int low, int high) {
	int pivotValue = nums[high];
	int left = low, right = high - 1;
	while (left <= right) {
		while (left <= right && nums[left] <= pivotValue) {
			left++;
		}
		while (left <= right && nums[right] >= pivotValue) {
			right--;
		}
		if (left < right) {
			swap(nums, left, right);
		}
	}
	nums[left] = pivotValue;
	nums[high] = nums[left];
	return left;
}